///
/// JHybridDuplexStreamSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridDuplexStreamSpec.hpp"

// Forward declaration of `HybridInputStreamSpec` to properly resolve imports.
namespace margelo::nitro::realfetch { class HybridInputStreamSpec; }
// Forward declaration of `HybridOutputStreamSpec` to properly resolve imports.
namespace margelo::nitro::realfetch { class HybridOutputStreamSpec; }

#include <memory>
#include "HybridInputStreamSpec.hpp"
#include "JHybridInputStreamSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include "HybridOutputStreamSpec.hpp"
#include "JHybridOutputStreamSpec.hpp"

namespace margelo::nitro::realfetch {

  jni::local_ref<JHybridDuplexStreamSpec::jhybriddata> JHybridDuplexStreamSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridDuplexStreamSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridDuplexStreamSpec::initHybrid),
    });
  }

  size_t JHybridDuplexStreamSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::shared_ptr<margelo::nitro::realfetch::HybridInputStreamSpec> JHybridDuplexStreamSpec::getInputStream() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridInputStreamSpec::javaobject>()>("getInputStream");
    auto __result = method(_javaPart);
    return JNISharedPtr::make_shared_from_jni<JHybridInputStreamSpec>(jni::make_global(__result));
  }
  void JHybridDuplexStreamSpec::setInputStream(const std::shared_ptr<margelo::nitro::realfetch::HybridInputStreamSpec>& inputStream) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JHybridInputStreamSpec::javaobject> /* inputStream */)>("setInputStream");
    method(_javaPart, std::dynamic_pointer_cast<JHybridInputStreamSpec>(inputStream)->getJavaPart());
  }
  std::shared_ptr<margelo::nitro::realfetch::HybridOutputStreamSpec> JHybridDuplexStreamSpec::getOutputStream() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridOutputStreamSpec::javaobject>()>("getOutputStream");
    auto __result = method(_javaPart);
    return JNISharedPtr::make_shared_from_jni<JHybridOutputStreamSpec>(jni::make_global(__result));
  }
  void JHybridDuplexStreamSpec::setOutputStream(const std::shared_ptr<margelo::nitro::realfetch::HybridOutputStreamSpec>& outputStream) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JHybridOutputStreamSpec::javaobject> /* outputStream */)>("setOutputStream");
    method(_javaPart, std::dynamic_pointer_cast<JHybridOutputStreamSpec>(outputStream)->getJavaPart());
  }

  // Methods
  

} // namespace margelo::nitro::realfetch
