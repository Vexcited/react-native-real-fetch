///
/// NitroRealFetchAutolinking.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

public final class NitroRealFetchAutolinking {
  public typealias bridge = margelo.nitro.realfetch.bridge.swift

  /**
   * Creates an instance of a Swift class that implements `HybridFetchSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridFetchSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridFetch`).
   */
  public static func createFetch() -> bridge.std__shared_ptr_HybridFetchSpec_ {
    let hybridObject = HybridFetch()
    return { () -> bridge.std__shared_ptr_HybridFetchSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
  
  /**
   * Creates an instance of a Swift class that implements `HybridDuplexStreamSpec`,
   * and wraps it in a Swift class that can directly interop with C++ (`HybridDuplexStreamSpec_cxx`)
   *
   * This is generated by Nitrogen and will initialize the class specified
   * in the `"autolinking"` property of `nitro.json` (in this case, `HybridDuplexStream`).
   */
  public static func createDuplexStream() -> bridge.std__shared_ptr_HybridDuplexStreamSpec_ {
    let hybridObject = HybridDuplexStream()
    return { () -> bridge.std__shared_ptr_HybridDuplexStreamSpec_ in
      let __cxxWrapped = hybridObject.getCxxWrapper()
      return __cxxWrapped.getCxxPart()
    }()
  }
}
