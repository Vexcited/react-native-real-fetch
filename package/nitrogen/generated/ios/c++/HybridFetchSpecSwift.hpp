///
/// HybridFetchSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridFetchSpec.hpp"

// Forward declaration of `HybridFetchSpec_cxx` to properly resolve imports.
namespace NitroRealFetch { class HybridFetchSpec_cxx; }

// Forward declaration of `NativeResponse` to properly resolve imports.
namespace margelo::nitro::realfetch { struct NativeResponse; }
// Forward declaration of `HybridInputStreamSpec` to properly resolve imports.
namespace margelo::nitro::realfetch { class HybridInputStreamSpec; }
// Forward declaration of `NativeRequest` to properly resolve imports.
namespace margelo::nitro::realfetch { struct NativeRequest; }
// Forward declaration of `RequestMethods` to properly resolve imports.
namespace margelo::nitro::realfetch { enum class RequestMethods; }
// Forward declaration of `RequestRedirection` to properly resolve imports.
namespace margelo::nitro::realfetch { enum class RequestRedirection; }

#include "NativeResponse.hpp"
#include <NitroModules/Promise.hpp>
#include <string>
#include <vector>
#include <memory>
#include "HybridInputStreamSpec.hpp"
#include <optional>
#include "NativeRequest.hpp"
#include "RequestMethods.hpp"
#include "RequestRedirection.hpp"

#include "NitroRealFetch-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::realfetch {

  /**
   * The C++ part of HybridFetchSpec_cxx.swift.
   *
   * HybridFetchSpecSwift (C++) accesses HybridFetchSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridFetchSpec_cxx can directly inherit from the C++ class HybridFetchSpec
   * to simplify the whole structure and memory management.
   */
  class HybridFetchSpecSwift: public virtual HybridFetchSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridFetchSpecSwift(const NitroRealFetch::HybridFetchSpec_cxx& swiftPart):
      HybridObject(HybridFetchSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroRealFetch::HybridFetchSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<NativeResponse>> create(const NativeRequest& opts) override {
      auto __result = _swiftPart.create(opts);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroRealFetch::HybridFetchSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::realfetch
