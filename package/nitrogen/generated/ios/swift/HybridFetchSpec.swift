///
/// HybridFetchSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridFetchSpec``
public protocol HybridFetchSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func create(opts: NativeRequest) throws -> Promise<NativeResponse>
}

/// See ``HybridFetchSpec``
open class HybridFetchSpec_base {
  private weak var cxxWrapper: HybridFetchSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridFetchSpec_cxx {
  #if DEBUG
    guard self is HybridFetchSpec else {
      fatalError("`self` is not a `HybridFetchSpec`! Did you accidentally inherit from `HybridFetchSpec_base` instead of `HybridFetchSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridFetchSpec_cxx(self as! HybridFetchSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Fetch HybridObject.
 * Implement this protocol to create Swift-based instances of Fetch.
 * ```swift
 * class HybridFetch : HybridFetchSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridFetchSpec = HybridFetchSpec_protocol & HybridFetchSpec_base
