///
/// NativeRequest.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NativeRequest`, backed by a C++ struct.
 */
public typealias NativeRequest = margelo.nitro.realfetch.NativeRequest

public extension NativeRequest {
  private typealias bridge = margelo.nitro.realfetch.bridge.swift

  /**
   * Create a new instance of `NativeRequest`.
   */
  init(url: String, method: RequestMethods, redirection: RequestRedirection, headers: [String]) {
    self.init(std.string(url), method, redirection, { () -> bridge.std__vector_std__string_ in
      var __vector = bridge.create_std__vector_std__string_(headers.count)
      for __item in headers {
        __vector.push_back(std.string(__item))
      }
      return __vector
    }())
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var method: RequestMethods {
    @inline(__always)
    get {
      return self.__method
    }
    @inline(__always)
    set {
      self.__method = newValue
    }
  }
  
  var redirection: RequestRedirection {
    @inline(__always)
    get {
      return self.__redirection
    }
    @inline(__always)
    set {
      self.__redirection = newValue
    }
  }
  
  var headers: [String] {
    @inline(__always)
    get {
      return self.__headers.map({ __item in String(__item) })
    }
    @inline(__always)
    set {
      self.__headers = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(newValue.count)
        for __item in newValue {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
    }
  }
}
