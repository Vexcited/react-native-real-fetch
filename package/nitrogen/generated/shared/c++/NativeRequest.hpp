///
/// NativeRequest.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `RequestMethods` to properly resolve imports.
namespace margelo::nitro::realfetch { enum class RequestMethods; }
// Forward declaration of `RequestRedirection` to properly resolve imports.
namespace margelo::nitro::realfetch { enum class RequestRedirection; }
// Forward declaration of `HybridInputStreamSpec` to properly resolve imports.
namespace margelo::nitro::realfetch { class HybridInputStreamSpec; }

#include <string>
#include "RequestMethods.hpp"
#include "RequestRedirection.hpp"
#include <vector>
#include <memory>
#include "HybridInputStreamSpec.hpp"
#include <optional>

namespace margelo::nitro::realfetch {

  /**
   * A struct which can be represented as a JavaScript object (NativeRequest).
   */
  struct NativeRequest {
  public:
    std::string url     SWIFT_PRIVATE;
    RequestMethods method     SWIFT_PRIVATE;
    RequestRedirection redirection     SWIFT_PRIVATE;
    std::vector<std::string> headers     SWIFT_PRIVATE;
    std::optional<std::shared_ptr<HybridInputStreamSpec>> body     SWIFT_PRIVATE;

  public:
    NativeRequest() = default;
    explicit NativeRequest(std::string url, RequestMethods method, RequestRedirection redirection, std::vector<std::string> headers, std::optional<std::shared_ptr<HybridInputStreamSpec>> body): url(url), method(method), redirection(redirection), headers(headers), body(body) {}
  };

} // namespace margelo::nitro::realfetch

namespace margelo::nitro {

  // C++ NativeRequest <> JS NativeRequest (object)
  template <>
  struct JSIConverter<margelo::nitro::realfetch::NativeRequest> final {
    static inline margelo::nitro::realfetch::NativeRequest fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::realfetch::NativeRequest(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "url")),
        JSIConverter<margelo::nitro::realfetch::RequestMethods>::fromJSI(runtime, obj.getProperty(runtime, "method")),
        JSIConverter<margelo::nitro::realfetch::RequestRedirection>::fromJSI(runtime, obj.getProperty(runtime, "redirection")),
        JSIConverter<std::vector<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headers")),
        JSIConverter<std::optional<std::shared_ptr<margelo::nitro::realfetch::HybridInputStreamSpec>>>::fromJSI(runtime, obj.getProperty(runtime, "body"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::realfetch::NativeRequest& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "url", JSIConverter<std::string>::toJSI(runtime, arg.url));
      obj.setProperty(runtime, "method", JSIConverter<margelo::nitro::realfetch::RequestMethods>::toJSI(runtime, arg.method));
      obj.setProperty(runtime, "redirection", JSIConverter<margelo::nitro::realfetch::RequestRedirection>::toJSI(runtime, arg.redirection));
      obj.setProperty(runtime, "headers", JSIConverter<std::vector<std::string>>::toJSI(runtime, arg.headers));
      obj.setProperty(runtime, "body", JSIConverter<std::optional<std::shared_ptr<margelo::nitro::realfetch::HybridInputStreamSpec>>>::toJSI(runtime, arg.body));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "url"))) return false;
      if (!JSIConverter<margelo::nitro::realfetch::RequestMethods>::canConvert(runtime, obj.getProperty(runtime, "method"))) return false;
      if (!JSIConverter<margelo::nitro::realfetch::RequestRedirection>::canConvert(runtime, obj.getProperty(runtime, "redirection"))) return false;
      if (!JSIConverter<std::vector<std::string>>::canConvert(runtime, obj.getProperty(runtime, "headers"))) return false;
      if (!JSIConverter<std::optional<std::shared_ptr<margelo::nitro::realfetch::HybridInputStreamSpec>>>::canConvert(runtime, obj.getProperty(runtime, "body"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
