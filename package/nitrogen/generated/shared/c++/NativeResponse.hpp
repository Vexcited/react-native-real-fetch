///
/// NativeResponse.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <vector>
#include <string>

namespace margelo::nitro::realfetch {

  /**
   * A struct which can be represented as a JavaScript object (NativeResponse).
   */
  struct NativeResponse {
  public:
    double status     SWIFT_PRIVATE;
    std::vector<std::string> headers     SWIFT_PRIVATE;

  public:
    NativeResponse() = default;
    explicit NativeResponse(double status, std::vector<std::string> headers): status(status), headers(headers) {}
  };

} // namespace margelo::nitro::realfetch

namespace margelo::nitro {

  using namespace margelo::nitro::realfetch;

  // C++ NativeResponse <> JS NativeResponse (object)
  template <>
  struct JSIConverter<NativeResponse> final {
    static inline NativeResponse fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NativeResponse(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "status")),
        JSIConverter<std::vector<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headers"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NativeResponse& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "status", JSIConverter<double>::toJSI(runtime, arg.status));
      obj.setProperty(runtime, "headers", JSIConverter<std::vector<std::string>>::toJSI(runtime, arg.headers));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "status"))) return false;
      if (!JSIConverter<std::vector<std::string>>::canConvert(runtime, obj.getProperty(runtime, "headers"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
